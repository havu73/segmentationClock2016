int main(int argc, char** argv) {
	input_params ip;
	ip.print_states = new int[2];
	(ip.print_states)[0] = PH1;
	(ip.print_states)[1] = PH7;
	ip.num_print_states = 2;
	
	concentrations cons(ip);
	
	for (int i = 0; i < 4; i++){
		(*(cons.cons_data)[MH1])[i] = i;
		(*(cons.cons_data)[MH7])[i] = i;
		(*(cons.cons_data)[MD])[i] = i;
		(*(cons.cons_data)[PH1])[i] = i;
		(*(cons.cons_data)[PH1])[i] = i;
	}
	
	for (int i = 1; i < 3; i++){
		cout << (*(cons.cons_data)[MH1])[i] << endl;
		cout << (*(cons.cons_data)[MH7])[i] << endl;
		cout << (*(cons.cons_data)[MD])[i] << endl;
		cout << (*(cons.cons_data)[PH1])[i] << endl;
		cout << (*(cons.cons_data)[PH1])[i] << endl;
	}
	cons.reset();
	for (int i = 1; i < 3; i++){
		cout << (*(cons.cons_data)[MH1])[i] << endl;
		cout << (*(cons.cons_data)[MH7])[i] << endl;
		cout << (*(cons.cons_data)[MD])[i] << endl;
		cout << (*(cons.cons_data)[PH1])[i] << endl;
		cout << (*(cons.cons_data)[PH1])[i] << endl;
	}
}

ip.print_states = new int[2];
	(ip.print_states)[0] = PH1;
	(ip.print_states)[1] = PH7;
	ip.num_print_states = 2;
	dependency_graph dg;
	cell ce(0, ip);
	rates rs;
	propensities prop (&dg);
	init_propensities(prop);
	(*(prop.prop_funs[RPSH1]))(ce, rs);
	(*(prop.prop_funs[RPSH7]))(ce, rs);
	(*(prop.prop_funs[RPSD]))(ce, rs);
	
	(*(prop.prop_funs[RPDH1]))(ce, rs);
	(*(prop.prop_funs[RPDH7]))(ce, rs);
	(*(prop.prop_funs[RPDD]))(ce, rs);
	(*(prop.prop_funs[RPDH11]))(ce, rs);
	(*(prop.prop_funs[RPDH17]))(ce, rs);
	(*(prop.prop_funs[RPDH77]))(ce, rs);
	
	(*(prop.prop_funs[RDAH11]))(ce, rs);
	(*(prop.prop_funs[RDAH17]))(ce, rs);
	(*(prop.prop_funs[RDAH77]))(ce, rs);
	
	(*(prop.prop_funs[RDDH11]))(ce, rs);
	(*(prop.prop_funs[RDDH17]))(ce, rs);
	(*(prop.prop_funs[RDDH77]))(ce, rs);
	
	(*(prop.prop_funs[RMDH1]))(ce, rs);
	(*(prop.prop_funs[RMDH7]))(ce, rs);
	(*(prop.prop_funs[RMDD]))(ce, rs);
	
	(*(prop.prop_funs[RMSH1]))(ce, rs);
	(*(prop.prop_funs[RMSH1N]))(ce, rs);
	
	(*(prop.prop_funs[RAG1PH11]))(ce, rs);
	(*(prop.prop_funs[RDG1PH11]))(ce, rs);
	
	(*(prop.prop_funs[RAG1N]))(ce, rs);
	(*(prop.prop_funs[RDG1N]))(ce, rs);
	
	(*(prop.prop_funs[RMSH7]))(ce, rs);
	(*(prop.prop_funs[RMSH7N]))(ce, rs);
	
	(*(prop.prop_funs[RAG7PH11]))(ce, rs);
	(*(prop.prop_funs[RDG7PH11]))(ce, rs);
	
	(*(prop.prop_funs[RAG7N]))(ce, rs);
	(*(prop.prop_funs[RDG7N]))(ce, rs);
	
	(*(prop.prop_funs[RMSD]))(ce, rs);

	(*(prop.prop_funs[RAGDPH11]))(ce, rs);
	(*(prop.prop_funs[RDGDPH11]))(ce, rs);
	
	#include "propensity.hpp"
void propensityRPSH1(cell& ce, rates& rs){
	cout << "Hello! Inside propensityRPSH1" << endl;
}

void propensityRPSH7(cell& ce, rates& rs){
	cout << "Hello! Inside propensityRPSH7" << endl;
}

void propensityRPSD(cell& ce, rates& rs){
	cout << "Hello! Inside propensityRPSD" << endl;
}

void propensityRPDH1(cell& ce, rates& rs){
	cout << "Hello! Inside propensityRPDH1" << endl;
}

void propensityRPDH7(cell& ce, rates& rs){
	cout << "Hello! Inside propensityRPDH7" << endl;
}

void propensityRPDD(cell& ce, rates& rs){
	cout << "Hello! Inside propensityRPDD" << endl;
}

void propensityRPDH11(cell& ce, rates& rs){
	cout << "Hello! Inside propensityRPDH11" << endl;
}

void propensityRPDH17(cell& ce, rates& rs){
	cout << "Hello! Inside propensityRPDH17" << endl;
}

void propensityRPDH77(cell& ce, rates& rs){
	cout << "Hello! Inside propensityRPDH77" << endl;
}

void propensityRDAH11(cell& ce, rates& rs){
	cout << "Hello! Inside propensityRDAH11" << endl;
}

void propensityRDAH17(cell& ce, rates& rs){
	cout << "Hello! Inside propensityRDAH17" << endl;
}

void propensityRDAH77(cell& ce, rates& rs){
	cout << "Hello! Inside propensityRDAH77" << endl;
}

void propensityRDDH11(cell& ce, rates& rs){
	cout << "Hello! Inside propensityRDDH11" << endl;
}

void propensityRDDH17(cell& ce, rates& rs){
	cout << "Hello! Inside propensityRDDH17" << endl;
}

void propensityRDDH77(cell& ce, rates& rs){
	cout << "Hello! Inside propensityRDDH77" << endl;
}

void propensityRMDH1(cell& ce, rates& rs){
	cout << "Hello! Inside propensityRMDH1" << endl;
}

void propensityRMDH7(cell& ce, rates& rs){
	cout << "Hello! Inside propensityRMDH7" << endl;
}

void propensityRMDD(cell& ce, rates& rs){
	cout << "Hello! Inside propensityRMDD" << endl;
}

void propensityRMSH1(cell& ce, rates& rs){
	cout << "Hello! Inside propensityRMSH1" << endl;
}
void propensityRMSH1N(cell& ce, rates& rs){
	cout << "Hello! Inside propensityRMSH1N" << endl;
}

void propensityRAG1PH11(cell& ce, rates& rs){
	cout << "Hello! Inside propensityRAG1PH11" << endl;
}
void propensityRDG1PH11(cell& ce, rates& rs){
	cout << "Hello! Inside propensityRDG1PH11" << endl;
}

void propensityRAG1N(cell& ce, rates& rs){
	cout << "Hello! Inside propensityRAG1N" << endl;
}
void propensityRDG1N(cell& ce, rates& rs){
	cout << "Hello! Inside propensityRDG1N" << endl;
}

void propensityRMSH7(cell& ce, rates& rs){
	cout << "Hello! Inside propensityRMSH7" << endl;
}
void propensityRMSH7N(cell& ce, rates& rs){
	cout << "Hello! Inside propensityRMSH7N" << endl;
}

void propensityRAG7PH11(cell& ce, rates& rs){
	cout << "Hello! Inside propensityRAG7PH11" << endl;
}
void propensityRDG7PH11(cell& ce, rates& rs){
	cout << "Hello! Inside propensityRDG7PH11" << endl;
}

void propensityRAG7N(cell& ce, rates& rs){
	cout << "Hello! Inside propensityRAG7N" << endl;
}
void propensityRDG7N(cell& ce, rates& rs){
	cout << "Hello! Inside propensityRDG7N" << endl;
}

void propensityRMSD(cell& ce, rates& rs){
	cout << "Hello! Inside propensityRMSD" << endl;
}

void propensityRAGDPH11(cell& ce, rates& rs){
	cout << "Hello! Inside propensityRAGDPH11" << endl;
}
void propensityRDGDPH11(cell& ce, rates& rs){
	cout << "Hello! Inside propensityRDGDPH11" << endl;
}



/* calc_neighbors_2d calculates a given cell's neighbors in a 2D simulation
	parameters:
		sd: the current simulation's data
	returns: nothing
	notes:
		2D simulations use a hexagonal grid of cells indexed like this:
		 ____  ____  ____  ____
		/    \/    \/    \/    \
		| 0  || 1  || 2  || 3  |
		\____/\____/\____/\____/__
		   /    \/    \/    \/    \
		   | 4  || 5  || 6  || 7  |
		 __\____/\____/\____/\____/
		/    \/    \/    \/    \
		| 8  || 9  || 10 || 11 |
		\____/\____/\____/\____/__
		   /    \/    \/    \/    \
		   | 12 || 13 || 14 || 15 |
		   \____/\____/\____/\____/
		
		This function should be called only when necessary due to the time cost; the populated neighbors array should be reused until invalid.
	todo:
*/
void calc_neighbors_2d (sim_data& sd) {
	for (int i = 0; i < sd.cells_total; i++) {
		if (i % 2 == 0) {																		// All even column cells
			sd.neighbors[i][0] = (i - sd.width_total + sd.cells_total) % sd.cells_total;			// Top
			sd.neighbors[i][1] = (i - sd.width_total + 1 + sd.cells_total) % sd.cells_total;		// Top-right
			sd.neighbors[i][2] = (i + 1) % sd.cells_total;											// Bottom-right
			sd.neighbors[i][3] = (i + sd.width_total) % sd.cells_total;								// Bottom
			if (i % sd.width_total == 0) {														// Left edge
				sd.neighbors[i][4] = i + sd.width_total - 1;										// Bottom-left
				sd.neighbors[i][5] = (i - 1 + sd.cells_total) % sd.cells_total;						// Top-left
			} else {																			// Not a left edge
				sd.neighbors[i][4] = i - 1;															// Bottom-left
				sd.neighbors[i][5] = (i - sd.width_total - 1 + sd.cells_total) % sd.cells_total;	// Top-left
			}
		} else {																				// All odd column cells
			sd.neighbors[i][0] = (i - sd.width_total + sd.cells_total) % sd.cells_total;			// Top
			if (i % sd.width_total == sd.width_total - 1) {											// Right edge
				sd.neighbors[i][1] = i - sd.width_total + 1;										// Top-right
				sd.neighbors[i][2] = (i + 1) % sd.cells_total;										// Bottom-right
			} else {																			// Not a right edge
				sd.neighbors[i][1] = i + 1;															// Top-right
				sd.neighbors[i][2] = (i + sd.width_total + 1 + sd.cells_total) % sd.cells_total;	// Nottom-right
			}																					// All odd column cells
			sd.neighbors[i][3] = (i + sd.width_total) % sd.cells_total;								// Bottom
			sd.neighbors[i][4] = (i + sd.width_total - 1) % sd.cells_total;							// Bottom-left
			sd.neighbors[i][5] = (i - 1 + sd.cells_total) % sd.cells_total;							// Top-left
		}
	}
}

